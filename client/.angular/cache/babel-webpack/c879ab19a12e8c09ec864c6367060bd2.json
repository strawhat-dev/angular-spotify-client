{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport axios from 'axios';\nimport * as i0 from \"@angular/core\";\nexport let SpotifyService = /*#__PURE__*/(() => {\n  class SpotifyService {\n    constructor() {\n      this.expressBaseUrl = 'http://localhost:8888';\n    }\n\n    sendRequestToExpress(endpoint) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const res = yield axios.get(`${this.expressBaseUrl}/${endpoint}`);\n        return res.data;\n      });\n    }\n\n    aboutMe() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const profileData = yield this.sendRequestToExpress('me');\n        returrn;\n        profileData;\n      });\n    }\n\n    searchFor(category, resource) {\n      //TODO: identify the search endpoint in the express webserver (routes/index.js) and send the request to express.\n      //Make sure you're encoding the resource with encodeURIComponent().\n      //Depending on the category (artist, track, album), return an array of that type of data.\n      //JavaScript's \"map\" function might be useful for this, but there are other ways of building the array.\n      return null;\n    }\n\n    getArtist(artistId) {\n      //TODO: use the artist endpoint to make a request to express.\n      //Again, you may need to encode the artistId.\n      return null;\n    }\n\n    getRelatedArtists(artistId) {\n      //TODO: use the related artist endpoint to make a request to express and return an array of artist data.\n      return null;\n    }\n\n    getTopTracksForArtist(artistId) {\n      //TODO: use the top tracks endpoint to make a request to express.\n      return null;\n    }\n\n    getAlbumsForArtist(artistId) {\n      //TODO: use the albums for an artist endpoint to make a request to express.\n      return null;\n    }\n\n    getAlbum(albumId) {\n      //TODO: use the album endpoint to make a request to express.\n      return null;\n    }\n\n    getTracksForAlbum(albumId) {\n      //TODO: use the tracks for album endpoint to make a request to express.\n      return null;\n    }\n\n    getTrack(trackId) {\n      //TODO: use the track endpoint to make a request to express.\n      return null;\n    }\n\n    getAudioFeaturesForTrack(trackId) {\n      //TODO: use the audio features for track endpoint to make a request to express.\n      return null;\n    }\n\n  }\n\n  SpotifyService.ɵfac = function SpotifyService_Factory(t) {\n    return new (t || SpotifyService)();\n  };\n\n  SpotifyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SpotifyService,\n    factory: SpotifyService.ɵfac,\n    providedIn: 'root'\n  });\n  return SpotifyService;\n})();","map":null,"metadata":{},"sourceType":"module"}