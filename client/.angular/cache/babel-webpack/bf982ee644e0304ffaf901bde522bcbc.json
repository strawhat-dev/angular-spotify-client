{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport axios from 'axios';\nimport { ArtistData } from '../data/artist-data';\nimport { AlbumData } from '../data/album-data';\nimport { TrackData } from '../data/track-data';\nimport { ProfileData } from '../data/profile-data';\nimport * as i0 from \"@angular/core\";\nexport let SpotifyService = /*#__PURE__*/(() => {\n  class SpotifyService {\n    constructor() {\n      this.expressBaseUrl = 'http://localhost:8888';\n    }\n\n    sendRequest(endpoint) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const res = yield axios.get(`${this.expressBaseUrl}/${endpoint}`);\n        return res.data;\n      });\n    }\n\n    aboutMe() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const data = yield this.sendRequest('me');\n        const profileData = new ProfileData(data);\n        return profileData;\n      });\n    }\n\n    searchFor(category, resource) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const encoded = encodeURIComponent(resource);\n        const categoryDispatch = {\n          artist: data => new ArtistData(data),\n          album: data => new AlbumData(data),\n          track: data => new TrackData(data)\n        };\n        const data = yield this.sendRequest(`search/${category}/${encoded}`);\n        const items = yield data[`${category}s`].items;\n        return items.map(item => categoryDispatch[category](item));\n      });\n    }\n\n    getArtist(artistId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const encoded = encodeURIComponent(artistId);\n        const data = yield this.sendRequest(`artist/${encoded}`);\n        const artistData = new ArtistData(data);\n        return artistData;\n      });\n    }\n\n    getRelatedArtists(artistId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const encoded = encodeURIComponent(artistId);\n        const data = yield this.sendRequest(`artist-related-artists/${encoded}`);\n        const relatedArtists = data.artists.map(artist => new ArtistData(artist));\n        return relatedArtists;\n      });\n    }\n\n    getArtistTopTracks(artistId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const encoded = encodeURIComponent(artistId);\n        const data = yield this.sendRequest(`artist-top-tracks/${encoded}`);\n        const artistTopTracks = data.tracks.map(track => new TrackData(track));\n        return artistTopTracks;\n      });\n    }\n\n    getArtistAlbums(artistId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const encoded = encodeURIComponent(artistId);\n        const data = yield this.sendRequest(`artist-albums/${encoded}`);\n        const artistAlbums = yield data.items.map(album => new AlbumData(album));\n        return artistAlbums;\n      });\n    }\n\n    getAlbum(albumId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const encoded = encodeURIComponent(albumId);\n        const data = yield this.sendRequest(`album/${encoded}`);\n        const album = new AlbumData(data);\n        return album;\n      });\n    }\n\n    getAlbumTracks(albumId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const encoded = encodeURIComponent(albumId);\n        const data = yield this.sendRequest(`album-tracks/${encoded}`);\n        const albumTracks = data.items.map(track => new TrackData(track));\n        return albumTracks;\n      });\n    }\n\n    getTrack(trackId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const encoded = encodeURIComponent(trackId);\n        const data = yield this.sendRequest(`track/${encoded}`);\n        const track = new TrackData(data);\n        return track;\n      });\n    } // async getTrackAudioFeatures(trackId: string): Promise<TrackFeature[]> {\n\n\n    getTrackAudioFeatures(trackId) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const encoded = encodeURIComponent(trackId);\n        const data = yield this.sendRequest(`track-audio-features/${encoded}`);\n        const trackFeatures = data.audio_features;\n        return trackFeatures;\n      });\n    }\n\n  }\n\n  SpotifyService.ɵfac = function SpotifyService_Factory(t) {\n    return new (t || SpotifyService)();\n  };\n\n  SpotifyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SpotifyService,\n    factory: SpotifyService.ɵfac,\n    providedIn: 'root'\n  });\n  return SpotifyService;\n})();","map":null,"metadata":{},"sourceType":"module"}